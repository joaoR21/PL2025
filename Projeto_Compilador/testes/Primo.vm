    PUSHI 0         // aloca espaço para variável 'num'
    PUSHI 0         // aloca espaço para variável 'i'
    PUSHI 0         // aloca espaço para variável 'primo'
START
    PUSHS "Introduza um número inteiro positivo:"
    WRITES
    WRITELN
    READ
    ATOI
    STOREG 0        // guarda em 'num'
    PUSHI 1
    STOREG 2        // guarda valor em 'primo'
    PUSHI 2
    STOREG 1        // guarda valor em 'i'
// início do ciclo while
WHILESTART1:
    PUSHG 1         // carrega valor da variável global 'i' (tipo integer)
    PUSHG 0         // carrega valor da variável global 'num' (tipo integer)
    PUSHI 2
    DIV
    INFEQ
    JZ ANDFALSE3    // se lado esq. do AND é falso, salta (consome valor)
    PUSHG 2         // carrega valor da variável global 'primo' (tipo boolean)
    JUMP ANDEND4
ANDFALSE3:
    PUSHI 0         // resultado do AND é falso
ANDEND4:
    JZ WHILEEND2
    PUSHG 0         // carrega valor da variável global 'num' (tipo integer)
    PUSHG 1         // carrega valor da variável global 'i' (tipo integer)
    MOD
    PUSHI 0
    EQUAL
    JZ IFEND6
    PUSHI 0
    STOREG 2        // guarda valor em 'primo'
IFELSE5:
IFEND6:
    PUSHG 1         // carrega valor da variável global 'i' (tipo integer)
    PUSHI 1
    ADD
    STOREG 1        // guarda valor em 'i'
    JUMP WHILESTART1
// fim do ciclo while
WHILEEND2:
    PUSHG 2         // carrega valor da variável global 'primo' (tipo boolean)
    JZ IFELSE7
    PUSHG 0         // carrega valor da variável global 'num' (tipo integer)
    WRITEI
    PUSHS " é um número primo"
    WRITES
    WRITELN
    JUMP IFEND8
IFELSE7:
    PUSHG 0         // carrega valor da variável global 'num' (tipo integer)
    WRITEI
    PUSHS " não é um número primo"
    WRITES
    WRITELN
IFEND8:
STOP
